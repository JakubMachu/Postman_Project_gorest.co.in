{
	"info": {
		"_postman_id": "07957913-f77b-4de9-a06a-ad1398b843eb",
		"name": "GO Rest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25164186"
	},
	"item": [
		{
			"name": "Verify response, create user, save user id to variable",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request, user created!\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
							"});\r",
							"\r",
							"// Get user id from created user and save it to \"id\" variable in \"GO Rest API\" environments.\r",
							"pm.environment.get(\"id\");\r",
							"const jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"id\", jsonData.id);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"email\": \"{{$randomEmail}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request, user found by id!\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit name of the user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request, user name has been changed!\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\": \"Jhon Wick\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Name verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request, user found by id!\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Name is: Jhon Wick.\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Jhon Wick\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request, user was deleted!\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if user is deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request, user not found!\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Name: Jhon Wick not found!\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.not.eql(\"Jhon Wick\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}