{
	"info": {
		"_postman_id": "e6c26227-a5a2-4ea0-b879-448eb46e795d",
		"name": "Postman project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25164186"
	},
	"item": [
		{
			"name": "Status code, response time, heder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}",
					"host": [
						"{{URL1}}"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Get user by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should include expected name: Cale\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.equal(\"Cale\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Cale\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}?name=Cale",
					"host": [
						"{{URL1}}"
					],
					"query": [
						{
							"key": "name",
							"value": "Cale"
						}
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}?id=38004",
					"host": [
						"{{URL1}}"
					],
					"query": [
						{
							"key": "id",
							"value": "38004"
						}
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "User id verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"ID is: 38004\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(280);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response: name is string, id is number\", () => {\r",
							"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}?id=38004",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}"
					],
					"query": [
						{
							"key": "id",
							"value": "38004"
						}
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"  pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"gender\": \"male\",\r\n  \"status\": \"active\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}",
					"host": [
						"{{URL1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit name of the user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Jon\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Jon\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"name\", \"John Doe\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Jon\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "User name verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Name is: Jon\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Jon\");\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response: name is string, id is number\", () => {\r",
							"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Edit status of the user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is active\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"active\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"status\", \"active\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 - No Content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Check if user is deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"User not found\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Resource not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}?name=Jon",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}"
					],
					"query": [
						{
							"key": "name",
							"value": "Jon"
						}
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Creates a user post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Postman - Environment Variables\",\r\n    \"body\": \"Variables give the option to hold and repeat parameters in the requests, collections, scripts and so on. If we need to modify a value, we need to do it in only one place. Thus, the variables help to minimise the chance of errors and increase efficiency\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}/posts",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}",
						"posts"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Retrieves user post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}/posts",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}",
						"posts"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Create a post comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\": \"Will Smith\",\r\n        \"email\": \"will.smith@email.com\",\r\n        \"body\": \"Very good article for people who struggles to learn variables in Postman.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL2}}/{{API_NUMBER}}/comments",
					"host": [
						"{{URL2}}"
					],
					"path": [
						"{{API_NUMBER}}",
						"comments"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Retrieve a post comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\": \"Will Smith\",\r\n        \"email\": \"will.smith@email.com\",\r\n        \"body\": \"Very good article for people who struggles to learn variables in Postman.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL2}}/{{API_NUMBER}}/comments",
					"host": [
						"{{URL2}}"
					],
					"path": [
						"{{API_NUMBER}}",
						"comments"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Create user todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "  {\r\n        \"title\": \"Go shopping - buy some eggs, bread and potatoes for dinner.\",\r\n        \"due_on\": \"2023-01-07T00:00:00.000+05:30\",\r\n        \"status\": \"pending\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}/todos",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}",
						"todos"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		},
		{
			"name": "Retrieve user todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL1}}/{{API_NUMBER}}/todos",
					"host": [
						"{{URL1}}"
					],
					"path": [
						"{{API_NUMBER}}",
						"todos"
					]
				},
				"description": "StartFragmentStartFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variable\n\nEndFragment\n\nCreate POST request, test which will verify the response and save USER_ID from response to variableEndFragment"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "65da4318221b225b53ab9e42e13ed4955104e49fb612eccf12e32d024f62f1aa",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "65da4318221b225b53ab9e42e13ed4955104e49fb612eccf12e32d024f62f1aa",
			"type": "string"
		},
		{
			"key": "url",
			"value": "https://gorest.co.in/public/v2"
		},
		{
			"key": "name",
			"value": "Jon Smith",
			"type": "string"
		},
		{
			"key": "email",
			"value": "jon.smith@mail.com",
			"type": "string"
		},
		{
			"key": "gender",
			"value": "MALE",
			"type": "string"
		},
		{
			"key": "status",
			"value": "active",
			"type": "string"
		},
		{
			"key": "id",
			"value": "i"
		}
	]
}